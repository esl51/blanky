/* Utils */
@use "sass:math";
@use "sass:string";

@mixin absolute-block($width: auto, $height: auto) {
  content: "";
  position: absolute;
  display: block;
  width: $width;
  height: $height;
}

@mixin transition($arguments: all 0.3s $easing) {
  transition: $arguments;
}

@mixin vmargin($margin: 1em) {
  margin-top: 0;
  margin-bottom: 0;

  &:not(:first-child) {
    margin-top: $margin;
  }

  &:not(:last-child) {
    margin-bottom: $margin;
  }
}

@mixin section {
  max-width: 100%;

  @include media("<desktop") {
    padding-top: math.div($section-padding, 2);
    padding-bottom: math.div($section-padding, 2);
  }

  @include media(">=desktop") {
    padding-top: $section-padding;
    padding-bottom: $section-padding;
  }
}

@mixin inner {
  width: 100%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;

  @include media("<desktop") {
    padding-left: math.div($inner-padding, 2);
    padding-right: math.div($inner-padding, 2);
  }

  @include media(">=desktop") {
    padding-left: $inner-padding;
    padding-right: $inner-padding;
  }
}

@function str-replace($string, $search, $replace: "") {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
  }

  @return $string;
}

@function grid-cols($col-count, $base-count: $columns, $add: 0) {
  @return calc((((100% - (#{$base-count} - 1) * #{$col-gutter}) / #{$base-count}) * #{$col-count} + (#{$col-count} - 1) * #{$col-gutter}) + #{$add});
}

@function grid-offset($col-count, $base-count: $columns, $add: $col-gutter) {
  @return calc((((100% - (#{$base-count} - 1) * #{$col-gutter}) / #{$base-count}) * #{$col-count} + (#{$col-count} - 1) * #{$col-gutter}) + #{$add});
}

.visually-hidden {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
  white-space: nowrap;
}
