@use 'sass:color';
@use 'sass:map';

// Breakpoints (first letter must be unique)

$breakpoints: (
  phone: 600px,
  tablet: 800px,
  middle: 1000px,
  laptop: 1200px,
  desktop: 1400px,
  wide: 1600px,
);

// Media expressions

$media-expressions: (
  'touch': '(hover: none)',
  'hover': '(hover: hover)',
);

// Grid

$grid-columns: 12;

// Colors

$colors: (
  'gray': #d5d5d5,
  'light-gray': #f7f7f7,
  'dark-gray': #333,
  'blue': #3782a4,
  'red': #d63939,
  'orange': #f59f00,
  'green': #2fb344,
  'cyan': #17a2b8,
);
$colors: map.merge(
  $colors,
  (
    'light': map.get($colors, 'light-gray'),
    'dark': map.get($colors, 'dark-gray'),
    'main': map.get($colors, 'blue'),
    'danger': map.get($colors, 'red'),
    'warning': map.get($colors, 'orange'),
    'success': map.get($colors, 'green'),
    'info': map.get($colors, 'cyan'),
  )
);
$colors: map.merge(
  $colors,
  (
    'light-main': color.mix(#fff, map.get($colors, 'main'), 75%),
    'dark-main': color.mix(#000, map.get($colors, 'main'), 25%),
  )
);

@forward '../../../node_modules/include-media/dist/include-media' with (
  $breakpoints: $breakpoints,
  $media-expressions: $media-expressions
);

@use '../../../node_modules/include-media/dist/include-media' as media;

@mixin scrollbar(
  $width: 10px,
  $radius: 5px,
  $color: rgba(#000, 0.3),
  $background: rgba(#000, 0.1)
) {
  @include media.media('hover') {
    &::-webkit-scrollbar-track {
      background-color: $background;
      border-radius: $radius;
    }

    &::-webkit-scrollbar {
      width: $width;
      height: $width;
    }

    &::-webkit-scrollbar-thumb {
      background-color: $color;
      border-radius: $radius;
    }
  }
}

@mixin absolute-block($width: auto, $height: auto) {
  content: '';
  position: absolute;
  display: block;
  width: $width;
  height: $height;
}

@mixin transition($arguments: all 0.3s var(--easing)) {
  transition: $arguments;
}

@mixin vmargin($margin: $spacing) {
  margin-top: 0;
  margin-bottom: 0;

  &:not(:first-child) {
    margin-top: $margin;
  }

  &:not(:last-child) {
    margin-bottom: $margin;
  }
}

@mixin section {
  padding-top: var(--section-spacing-top);
  padding-bottom: var(--section-spacing-bottom);
}

@mixin section-paddings {
  &:not(.section--no-spacing, .section--image, .visually-hidden) + & {
    --section-spacing-top: 0;
  }
}

@mixin inner {
  --inner-padding-left: var(--inner-spacing);
  --inner-padding-right: var(--inner-spacing);

  width: 100%;
  max-width: var(--max-width);
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--inner-padding-left);
  padding-right: var(--inner-padding-right);
}

@mixin block {
  @include vmargin(var(--block-spacing));

  width: 100%;
}

@mixin text {
  font-family: var(--text-family);
  font-weight: var(--text-weight);
}

@mixin t1 {
  @include text;

  font-size: var(--text-size);
  line-height: var(--text-height);
}

@mixin t2 {
  @include text;

  font-size: var(--text-size-sm);
  line-height: var(--text-height-sm);
}

@mixin t3 {
  @include text;

  font-size: var(--text-size-lg);
  line-height: var(--text-height-lg);
}

@mixin dark {
  --text-color: #fff;
  --heading-color: #fff;
  --surface-color: var(--dark-color);
  --surface-secondary-color: #{color.mix(#fff, map.get($colors, 'dark'), 3%)};
  --surface-tertiary-color: #{color.mix(#fff, map.get($colors, 'dark'), 50%)};
  --border-color: #{color.mix(#fff, map.get($colors, 'dark'), 15%)};
  --marker-color: var(--dark-main-color);
}

@mixin heading($margin: true) {
  @if ($margin == true) {
    @include vmargin(var(--heading-spacing));
  }

  font-family: var(--heading-family);
  color: var(--heading-color);
}

@mixin h1($margin: true) {
  @include heading($margin);

  font-size: var(--h1-size);
  line-height: var(--h1-height);
  font-weight: var(--h1-weight);
}

@mixin h2($margin: true) {
  @include heading($margin);

  font-size: var(--h2-size);
  line-height: var(--h2-height);
  font-weight: var(--h2-weight);
}

@mixin h3($margin: true) {
  @include heading($margin);

  font-size: var(--h3-size);
  line-height: var(--h3-height);
  font-weight: var(--h3-weight);
}

@mixin h4($margin: true) {
  @include heading($margin);

  font-size: var(--h4-size);
  line-height: var(--h4-height);
  font-weight: var(--h4-weight);
}

@mixin h5($margin: true) {
  @include heading($margin);

  font-size: var(--h5-size);
  line-height: var(--h5-height);
  font-weight: var(--h5-weight);
}

@mixin h6($margin: true) {
  @include heading($margin);

  font-size: var(--h6-size);
  line-height: var(--h6-height);
  font-weight: var(--h6-weight);
}

@mixin underline($style: underline, $thickness: 1px, $offset: 0.25em) {
  text-decoration: $style;
  text-decoration-thickness: $thickness;
  text-underline-offset: $offset;
}

@mixin animator-delay($count: 10, $base: 0ms, $increment: 50ms) {
  @for $i from 0 through $count {
    $d: $base + $i * $increment;

    &:nth-child(#{$i}) {
      --animator-delay: #{$d};
    }
  }
}

@mixin animator() {
  &:not(.animator--children, .animator--active),
  &.animator--children:not(.animator--active) > * {
    @content;
  }
}

@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

@function grid-cols($col-count, $base-count: var(--grid-columns), $add: 0) {
  @return calc(
    (
        ((100% - (#{$base-count} - 1) * var(--grid-col-gap)) / #{$base-count}) *
          #{$col-count} + (#{$col-count} - 1) * var(--grid-col-gap)
      ) + #{$add}
  );
}

@function grid-offset(
  $col-count,
  $base-count: var(--grid-columns),
  $add: var(--grid-col-gap)
) {
  @return calc(
    (
        ((100% - (#{$base-count} - 1) * var(--grid-col-gap)) / #{$base-count}) *
          #{$col-count} + (#{$col-count} - 1) * var(--grid-col-gap)
      ) + #{$add}
  );
}

@function svg-data-url($svg, $color: #fff) {
  $color-value: $color;
  $escaped-color: $color-value;

  @if meta.type-of($color) == string {
    $color-value: map.get($colors, $color);
  }

  $escaped-color: str-replace(#{$color-value}, '#', '%23');

  @return url('data:image/svg+xml;utf8,' + str-replace(
      $svg,
      'currentColor',
      $escaped-color
    ));
}
